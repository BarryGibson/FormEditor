@inherits Umbraco.Web.Mvc.UmbracoViewPage<FormEditor.Fields.InvisibleReCaptchaField>
@{
  // get current web site language so the reCAPTCHA renders in the correct language
  var language = Umbraco.CultureDictionary.Culture.TwoLetterISOLanguageName.ToLowerInvariant();
  // get the content on which the form resides (assigned by the partial form rendering)
  var formContent = ViewBag.FormContent as IPublishedContent;
}
<div class="form-group">
  <script>
    var captchaWidget_@(formContent.Id);

    function captchaValidate_@(formContent.Id)() {
      @* get the global access to the form scope *@
      var fe = feGlobal[@(formContent.Id)];
      @* execute the form client side validation *@
      if (fe.validate()) {
        @* the form is valid - execute the reCAPTCHA *@
        grecaptcha.execute(captchaWidget_@(formContent.Id));
      }
      return false;
    }

    function captchaSubmit_@(formContent.Id)(token) {
      @* get the global access to the form scope *@
      var fe = feGlobal[@(formContent.Id)];
      @* submit the form *@
      fe.submit();
    }

    function captchaLoad_@(formContent.Id)() {
      @* explicitly render the reCAPTCHA widget so we know which widget to validate (in case we have multiple forms) *@
      captchaWidget_@(formContent.Id) = grecaptcha.render("captcha_@(formContent.Id)", {}, true);
    }
  </script>
  <script src="https://www.google.com/recaptcha/api.js?hl=@language&onload=captchaLoad_@(formContent.Id)&render=explicit" async defer></script>
  <div class="g-recaptcha"
       data-sitekey="@Model.PublicKey"
       data-callback="captchaSubmit_@(formContent.Id)"
       data-size="invisible"
       id="captcha_@(formContent.Id)">
  </div>
  <button type="submit" onclick="return captchaValidate_@(formContent.Id)()" class="btn btn-primary">@Model.Text</button>
</div>
